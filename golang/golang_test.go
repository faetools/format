package golang_test

import (
	"testing"
	"time"

	_ "embed" // Tricky code.

	"github.com/faetools/format/golang"
	"github.com/stretchr/testify/assert"
	"golang.org/x/tools/imports"
)

// this snippet has caused problems in the past as it would never finish
//go:embed "tricky code.txt"
var trickyCode []byte

const (
	waitTime = 6 * time.Second

	before = `// Code generated by test; DO NOT EDIT.
	package main

	var msg = "Hello World" // a comment
	var bar = "This line should be removed"




	// here is a comment
	const foo = "test"
	`

	after = `// Code generated by test; DO NOT EDIT.
package main

var (
	msg = "Hello World" // a comment
	bar = "This line should be removed"
)

// here is a comment
const foo = "test"
`
)

func TestFormat(t *testing.T) {
	t.Parallel()

	out, err := golang.Format("", []byte(before))
	assert.NoError(t, err)
	assert.Equal(t, after, string(out))
}

func TestFormat_Failure(t *testing.T) {
	t.Parallel()

	_, err := golang.Format("foo.go", nil)
	assert.EqualError(t, err, "running 'imports': open foo.go: no such file or directory")
}

func TestImports(t *testing.T) {
	t.Parallel()

	done := make(chan error)

	go func() {
		_, err := imports.Process("internal/httpservice/helpers.gen_test.go", trickyCode, nil)
		done <- err
	}()

	select {
	case <-time.After(waitTime):
		t.Fatal("took too long")
	case err := <-done:
		assert.NoError(t, err)
	}
}
