package yaml_test

import (
	"fmt"
	"testing"

	"github.com/faetools/format/yaml"
	"github.com/golangci/golangci-lint/pkg/config"
	"github.com/stretchr/testify/require"
)

func TestEncode(t *testing.T) {
	t.Parallel()

	for i, tt := range []struct {
		in  interface{}
		out string
	}{
		{nil, "null\n"},
		{[]string{"foo", "bar"}, "  - foo\n  - bar\n"},
	} {
		i, tt := i, tt
		t.Run(fmt.Sprintf("#%d", i), func(t *testing.T) {
			t.Parallel()

			res, err := yaml.Encode(tt.in)
			require.NoError(t, err)

			require.Equal(t, tt.out, string(res))
		})
	}
}

func TestEncode_WithOptions(t *testing.T) {
	t.Parallel()

	res, err := yaml.Encode("foo", yaml.AddDoNotEditNotice("test"))
	require.NoError(t, err)

	require.Equal(t, "# Code generated by test; DO NOT EDIT.\nfoo\n", string(res))
}

func TestEncode_Mapstructure(t *testing.T) {
	t.Parallel()

	res, err := yaml.Encode(config.Config{
		Run: config.Run{},
		Output: config.Output{
			Color:           "my-color",
			PrintLinterName: true,
		},
	}, yaml.UseMapstructure)
	require.NoError(t, err)

	require.Equal(t, `output:
  color: my-color
  print-linter-name: true
`, string(res))
}
